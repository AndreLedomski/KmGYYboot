from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
from apscheduler.schedulers.background import BackgroundScheduler
from sqlalchemy.orm import sessionmaker
from database import engine, Event, User

TOKEN = "7707609145:AAFU1fVID8Dbc4LCEgNKFQO7xhCApbSTOGo"
Session = sessionmaker(bind=engine)
scheduler = BackgroundScheduler()

# ---------------------- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ----------------------
def start(update: Update, context: CallbackContext):
    user_id = update.effective_chat.id
    session = Session()
    if not session.query(User).get(user_id):
        session.add(User(chat_id=user_id))
        session.commit()
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ö–µ–º–ì–£! üéì\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
    )

def show_events(update: Update, context: CallbackContext):
    buttons = [
        [InlineKeyboardButton("–§–∏–ª—å—Ç—Ä—ã", callback_data="open_filters")],
        [InlineKeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="open_calendar")]
    ]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ---------------------- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ----------------------
def handle_filters(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "open_filters":
        buttons = [
            [InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ", callback_data="filter_date")],
            [InlineKeyboardButton("–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="filter_category")],
            [InlineKeyboardButton("–ü–æ –º–µ—Å—Ç—É", callback_data="filter_location")]
        ]
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------------------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ----------------------
def admin_login(update: Update, context: CallbackContext):
    if context.args and context.args[0] == "mnjjkyr123$##":
        user_id = update.effective_chat.id
        session = Session()
        user = session.query(User).get(user_id)
        user.is_admin = True
        session.commit()
        update.message.reply_text("‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

def add_event(update: Update, context: CallbackContext):
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    pass

# ---------------------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----------------------
def send_notifications():
    session = Session()
    events = session.query(Event).filter(Event.date >= datetime.now()).all()
    for user in session.query(User):
        for event in events:
            context.bot.send_message(
                chat_id=user.chat_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.title} —Å–æ—Å—Ç–æ–∏—Ç—Å—è {event.date}!"
            )

scheduler.add_job(send_notifications, 'interval', hours=24)
scheduler.start()

# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----------------------
def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("events", show_events))
    dp.add_handler(CommandHandler("admin", admin_login))
    dp.add_handler(CallbackQueryHandler(handle_filters))

    updater.start_polling()
    updater.idle()

if name == "main":
    main()